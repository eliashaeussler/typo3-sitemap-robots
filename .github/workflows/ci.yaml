name: CI
on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - main

permissions: read-all

jobs:
  prepare:
    name: Prepare workflow
    uses: eliashaeussler/.github/.github/workflows/pull-request.yaml@main

  cgl:
    name: CGL
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.continue == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Prepare environment
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          tools: composer:v2, cs2pr
          coverage: none

      # Validation
      - name: Validate composer.json
        run: composer validate --strict

      # Install dependencies
      - name: Install Composer dependencies
        uses: ramsey/composer-install@v3

      # Analyze
      - name: Analyze dependencies
        run: composer cgl analyze:dependencies

      # Linting
      - name: Lint composer.json
        run: composer cgl lint:composer
      - name: Lint Editorconfig
        run: composer cgl lint:editorconfig
      - name: Lint PHP
        run: composer cgl lint:php -- --format=checkstyle | cs2pr

      # SCA
      - name: SCA PHP
        run: composer cgl sca:php -- --error-format github

      # Migration
      - name: Rector migration
        run: composer cgl migration:rector -- --dry-run

      # Documentation
      - name: Check documentation build
        run: |
          mkdir -p .Build/docs
          composer docs:build -- --no-progress --fail-on-log

  crowdin:
    name: Synchronize with Crowdin
    runs-on: ubuntu-latest
    needs: prepare
    if: ${{ needs.prepare.outputs.continue == 'true' && github.ref_name == 'main' }}
    steps:
      - uses: actions/checkout@v4

      - name: Upload sources
        uses: crowdin/github-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config: '.crowdin.yaml'
          project_id: ${{ secrets.CROWDIN_PROJECT_ID }}
          token: ${{ secrets.CROWDIN_PERSONAL_TOKEN }}
          crowdin_branch_name: 'main'

  tests:
    name: Tests (PHP ${{ matrix.php-version }}, TYPO3 ${{ matrix.typo3-version }} & ${{ matrix.dependencies }} dependencies)
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.continue == 'true'
    strategy:
      fail-fast: false
      matrix:
        php-version: ["8.1", "8.2", "8.3", "8.4"]
        typo3-version: ["12.4", "13.4"]
        dependencies: ["highest", "lowest"]
        exclude:
          - php-version: "8.1"
            typo3-version: "13.4"
    env:
      typo3DatabaseName: typo3
      typo3DatabaseHost: '127.0.0.1'
      typo3DatabaseUsername: root
      typo3DatabasePassword: root
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Prepare environment
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          tools: composer:v2
          coverage: none

      # Start MySQL service
      - name: Start MySQL
        run: sudo /etc/init.d/mysql start

      # Install dependencies
      - name: Install Composer dependencies
        uses: ramsey/composer-install@v3
        with:
          dependency-versions: ${{ matrix.dependencies }}
          composer-options: --with=typo3/cms-core:"^${{ matrix.typo3-version }}"

      # Run tests
      - name: Run tests
        run: composer test

  test-coverage:
    name: Test coverage
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.continue == 'true'
    env:
      typo3DatabaseName: typo3
      typo3DatabaseHost: '127.0.0.1'
      typo3DatabaseUsername: root
      typo3DatabasePassword: root
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Prepare environment
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          tools: composer:v2
          coverage: pcov

      # Start MySQL service
      - name: Start MySQL
        run: sudo /etc/init.d/mysql start

      # Install dependencies
      - name: Install Composer dependencies
        uses: ramsey/composer-install@v3

      # Run tests
      - name: Run tests
        run: composer test:coverage

      # Upload artifact
      - name: Fix coverage path
        working-directory: .Build/coverage
        run: sed -i 's#/home/runner/work/typo3-sitemap-robots/typo3-sitemap-robots#${{ github.workspace }}#g' clover.xml
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: .Build/coverage/clover.xml
          retention-days: 7

  report-coverage:
    name: Report test coverage
    needs: test-coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Download artifact
      - name: Download coverage artifact
        id: download
        uses: actions/download-artifact@v5
        with:
          name: coverage

      # CodeClimate
      - name: CodeClimate report
        uses: paambaati/codeclimate-action@v9.0.0
        if: env.CC_TEST_REPORTER_ID
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        with:
          coverageLocations: |
            ${{ steps.download.outputs.download-path }}/clover.xml:clover

      # Coveralls
      - name: Coveralls report
        uses: coverallsapp/github-action@v2
        with:
          file: ${{ steps.download.outputs.download-path }}/clover.xml
